/**
*   Modal window
*   Css only clever panel window.
*
*   @class     .panel
*   @children  .panel-trigger, .panel-overlay, .panel-container
*   @states    :checked
*/
.panel {

  /**
  *   Overlay color
  *   Sets the color of the overlay layer
  *
  *   @var    $overlay-color
  */
  $overlay-color = #000000;

  /**
  *   Transition
  *   Sets a simple fade-in transition between
  *   the panel's active and inactive
  *   states.
  *
  *   @var    $transition
  */
  $transition = opacity .3s;

  /**
  *   Modal wrapper
  *   This styles the tag which will wrap the
  *   collection of tags related to the
  *   panel window.
  *
  *   @selector  .panel
  */
  & {
    display inline-block
  }

  /**
  *   Modal trigger
  *   This is a hidden checkbox which is used to
  *   tell the browser whether the panel is
  *   active or not.
  *
  *   @selector  .panel > .panel-trigger
  */
  & > .panel-trigger {
    display none
  }

  /**
  *   Modal overlay
  *   This is the overlay layer which is used
  *   to shade the content and give focus
  *   to the panel content.
  *
  *   @selector  .panel > .panel-trigger ~ .panel-overlay
  */
  & > .panel-trigger ~ .panel-overlay {
    top 0
    left 0
    opacity 0
    width 100%
    height 100%
    z-index 100
    position fixed
    visibility hidden
    transition opacity .3s

    & {
      background-color rgba($overlay-color, .50)
    }

    &.is-red {
      $overlay-color = _red
      background-color rgba($overlay-color, .50)
    }

    &.is-blue {
      $overlay-color = _blue
      background-color rgba($overlay-color, .50)
    }

    &.is-green {
      $overlay-color = _green
      background-color rgba($overlay-color, .50)
    }

    &.is-yellow {
      $overlay-color = _yellow
      background-color rgba($overlay-color, .50)
    }

    &.is-primary {
      $overlay-color = _primary
      background-color rgba($overlay-color, .50)
    }

    &.is-white {
      $overlay-color = _white
      background-color rgba($overlay-color, .50)
    }

  }

  /**
  *   Modal container
  *   This is the container which will hold the panel
  *   content. It will appear centered on the
  *   screen.
  *
  *   @selector  .panel > .panel-trigger ~ .panel-container
  */
  & > .panel-trigger ~ .panel-container {
    margin 0
    opacity 0
    z-index 110
    position fixed
    visibility hidden
    transition-delay .15s
    transition transform .3s

    &:first-child {
      margin-top 0
    }

    &.is-left {
      top 0
      left 0
      height 100%
      max-width 50%
      min-width 30%
      transform translateX(-100%)
      +below(_grid-max-md) {
        width 90%
        max-width 100vw
      }
    }

    &.is-right {
      top 0
      right 0
      height 100%
      max-width 50%
      min-width 30%
      transform translateX(100%)
      +below(_grid-max-md) {
        width 100%
        max-width 100%
      }
    }

    &.is-top {
      top 0
      left 0
      width 100%
      max-height 50%
      min-height 30%
      transform translateY(-100%)
      +below(_grid-max-md) {
        width 100%
        max-width 100%
      }
    }

    &.is-bottom {
      bottom 0
      left 0
      width 100%
      max-height 50%
      min-height 30%
      transform translateY(100%)
      +below(_grid-max-md) {
        width 100%
        max-width 100%
      }
    }

    +below(_grid-max-md) {
      width 100vw
      max-width 100vw
      padding 0 .50rem
    }
  }

  /**
  *   Active panel
  *   This styles the active state of the panel window,
  *   making both the overlay and the panel content
  *   visible to the user.
  *
  *   @state      :checked
  *   @selector   .panel > .panel-trigger:checked
  *   @sibling    .panel-overlay, .panel-container
  */
  & > .panel-trigger:checked {
    & ~ .panel-overlay, & ~ .panel-container {
      opacity 1
      visibility visible
      transform translateX(0)
    }
  }

}